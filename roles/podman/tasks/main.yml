---
- block:
  
  - name: pacman -S podman
    community.general.pacman:
      name: podman
      state: present
    when: ansible_facts['os_family'] == "Archlinux"

  - name: apt install podman
    ansible.builtin.apt:
      name: podman
      state: present
    when: ansible_facts['os_family'] == "Debian"

  - name: create separate podman user
    # disable the podman account ( don't allow login )
    ansible.builtin.user:
      name: "{{ podman_user }}"
      passworkd_lock: yes
      expires: 1
    when: podman_user != ansible_user_id

  - name: Check lingering
    stat:
      path: "/var/lib/systemd/linger/{{ podman_user }}"
    register: podman_user_lingering
    when: podman_user != "root"

  - name: Enable lingering
    command: "loginctl enable-linger {{ podman_user }}"
    when: not podman_user_lingering.stat.exists
  become: yes

- block:
  - name: setup container configs directory
    ansible.builtin.file:
      path: "/home/{{ podman_user }}/container_configs"
      state: directory
      owner: "{{ podman_user }}"
      group: "{{ podman_user }}"
      mode: '0700'

  - name: setup systemd user directory
    ansible.builtin.file:
      path: "/home/{{ podman_user }}/.config/systemd/user"
      state: directory
      owner: "{{ podman_user }}"
      group: "{{ podman_user }}"
      mode: '0700'

  #- import_tasks: common_ufw.yml
  #  when: ansible_facts['os_family'] == "Archlinux" or ansible_facts['os_family'] == "Debian"

  - name: create podman-system-prune.service/timer and podman-bridges.service
    ansible.builtin.template:
      src: "{{ item }}.j2"
      dest: "/home/{{ podman_user }}/.config/systemd/user/{{ item }}"
      owner: "{{ podman_user }}"
      group: "{{ podman_user }}"
      mode: '0600'
    loop:
      - podman-system-prune.service
      - podman-system-prune.timer
      - podman-bridges.service

  - name: systemctl --user daemon-reload
    ansible.builtin.systemd:
      daemon_reload: yes
      scope: user
  
  - name: systemctl --user enable podman-system-prune.timer and podman-bridges.service
    ansible.builtin.systemd:
      name: "{{ item }}"
      enabled: yes
      scope: user
    loop:
      - podman-system-prune.timer
      - podman-bridges.service

  - include_tasks: "{{ container_name }}.yml"
    loop: "{{ podman_containers }}"
    loop_control:
      loop_var: container_name

  become: yes
  become_user: "{{ podman_user }}"
