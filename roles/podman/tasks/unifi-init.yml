---
- name: Create a tmp direcoty to store database credentials during initial setup
  ansible.builtin.tempfile:
    state: directory
  become: true
  become_user: "{{ podman_user.name }}"
  register: unifi_db_tmp_dir

- name: init-mongo.js for initial setup
  ansible.builtin.template:
    src: "unifi-db-init-mongo.js.j2"
    dest: "{{ unifi_db_tmp_dir.path }}/init-mongo.js"
    owner: "{{ podman_user.name}}"
    group: "{{ podman_user.name }}"
    mode: '0644'
  become: true

- name: unifi-db.container and unifi.container
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/home/{{ podman_user.name }}/.config/containers/systemd/{{ item }}"
    owner: "{{ podman_user.name}}"
    group: "{{ podman_user.name }}"
    mode: '0600'
  become: true
  become_user: "{{ podman_user.name }}"
  loop:
    - unifi-db.container
    - unifi.container

- name: systemctl --user daemon-reload
  ansible.builtin.systemd: daemon_reload=true scope=user
  become: true
  become_user: "{{ podman_user.name }}"

- name: systemctl --user start unifi-db.service
  ansible.builtin.systemd: name=unifi-db state=started scope=user
  become: true
  become_user: "{{ podman_user.name }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: systemctl --user start unifi.service
  ansible.builtin.systemd: name=unifi state=started scope=user
  become: true
  become_user: "{{ podman_user.name }}"
  ignore_errors: "{{ ansible_check_mode }}"


- name: Reset variable unifi_database_dir
  ansible.builtin.stat:
    path: "{{ podman_user.unifi_db_dir }}"
  register: unifi_database_dir

